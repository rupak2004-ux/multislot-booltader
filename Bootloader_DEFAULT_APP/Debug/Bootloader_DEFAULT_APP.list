
Bootloader_DEFAULT_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010b8  0800418c  0800418c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08005244  08005244  00003030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08005244  08005244  00003030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005244  08005244  00002244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800524c  0800524c  00003030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800524c  0800524c  0000224c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005250  08005250  00002250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08005254  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003030  2**0
                  CONTENTS
 10 .bss          00000038  20000030  20000030  00003030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000068  20000068  00003030  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a28  00000000  00000000  0000305a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006b9  00000000  00000000  00004a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a8  00000000  00000000  00005140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000134  00000000  00000000  000052e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002716  00000000  00000000  0000541c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002087  00000000  00000000  00007b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a648  00000000  00000000  00009bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00014201  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005bc  00000000  00000000  00014244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00014800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800418c <__do_global_dtors_aux>:
 800418c:	b510      	push	{r4, lr}
 800418e:	4c05      	ldr	r4, [pc, #20]	@ (80041a4 <__do_global_dtors_aux+0x18>)
 8004190:	7823      	ldrb	r3, [r4, #0]
 8004192:	b933      	cbnz	r3, 80041a2 <__do_global_dtors_aux+0x16>
 8004194:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <__do_global_dtors_aux+0x1c>)
 8004196:	b113      	cbz	r3, 800419e <__do_global_dtors_aux+0x12>
 8004198:	4804      	ldr	r0, [pc, #16]	@ (80041ac <__do_global_dtors_aux+0x20>)
 800419a:	f3af 8000 	nop.w
 800419e:	2301      	movs	r3, #1
 80041a0:	7023      	strb	r3, [r4, #0]
 80041a2:	bd10      	pop	{r4, pc}
 80041a4:	20000030 	.word	0x20000030
 80041a8:	00000000 	.word	0x00000000
 80041ac:	0800522c 	.word	0x0800522c

080041b0 <frame_dummy>:
 80041b0:	b508      	push	{r3, lr}
 80041b2:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <frame_dummy+0x10>)
 80041b4:	b11b      	cbz	r3, 80041be <frame_dummy+0xe>
 80041b6:	4903      	ldr	r1, [pc, #12]	@ (80041c4 <frame_dummy+0x14>)
 80041b8:	4803      	ldr	r0, [pc, #12]	@ (80041c8 <frame_dummy+0x18>)
 80041ba:	f3af 8000 	nop.w
 80041be:	bd08      	pop	{r3, pc}
 80041c0:	00000000 	.word	0x00000000
 80041c4:	20000034 	.word	0x20000034
 80041c8:	0800522c 	.word	0x0800522c

080041cc <strlen>:
 80041cc:	4603      	mov	r3, r0
 80041ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d2:	2a00      	cmp	r2, #0
 80041d4:	d1fb      	bne.n	80041ce <strlen+0x2>
 80041d6:	1a18      	subs	r0, r3, r0
 80041d8:	3801      	subs	r0, #1
 80041da:	4770      	bx	lr

080041dc <USART2_Init>:




void USART2_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
	usart_handle.pUSARTx = USART2;
 80041e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <USART2_Init+0x3c>)
 80041e2:	4a0e      	ldr	r2, [pc, #56]	@ (800421c <USART2_Init+0x40>)
 80041e4:	601a      	str	r2, [r3, #0]
	usart_handle.USART_Config_t.USART_BAUD_RATE = USART_STD_BAUD_115200;
 80041e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <USART2_Init+0x3c>)
 80041e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80041ec:	609a      	str	r2, [r3, #8]
	usart_handle.USART_Config_t.USART_HW_FLOW_CTRL = USART_HW_FLOW_CTRL_NONE;
 80041ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004218 <USART2_Init+0x3c>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	73da      	strb	r2, [r3, #15]
	usart_handle.USART_Config_t.USART_MODE = USART_MODE_TXRX;
 80041f4:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <USART2_Init+0x3c>)
 80041f6:	2202      	movs	r2, #2
 80041f8:	711a      	strb	r2, [r3, #4]
	usart_handle.USART_Config_t.USART_STOP_BITS = USART_STOP_BIT_1;
 80041fa:	4b07      	ldr	r3, [pc, #28]	@ (8004218 <USART2_Init+0x3c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	731a      	strb	r2, [r3, #12]
	usart_handle.USART_Config_t.USART_WORD_LEN = USART_WORDLEN_8BITS;
 8004200:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <USART2_Init+0x3c>)
 8004202:	2200      	movs	r2, #0
 8004204:	735a      	strb	r2, [r3, #13]
	usart_handle.USART_Config_t.USART_PARITY = USART_PARITY_DISABLE;
 8004206:	4b04      	ldr	r3, [pc, #16]	@ (8004218 <USART2_Init+0x3c>)
 8004208:	2202      	movs	r2, #2
 800420a:	739a      	strb	r2, [r3, #14]
    USART_INIT(&usart_handle);
 800420c:	4802      	ldr	r0, [pc, #8]	@ (8004218 <USART2_Init+0x3c>)
 800420e:	f000 fc41 	bl	8004a94 <USART_INIT>
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	2000004c 	.word	0x2000004c
 800421c:	40004400 	.word	0x40004400

08004220 <GPIO_ButtonInit>:
    usart_gpios.GPIO_Config_t.GPIO_PinNumber = GPIO_PIN_NO_3;
    GPIO_INIT(&usart_gpios);
}

void GPIO_ButtonInit(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configurationp
	GPIOBtn.pGPIOx = GPIOC;
 8004226:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <GPIO_ButtonInit+0x50>)
 8004228:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_Config_t.GPIO_PinNumber = GPIO_PIN_NO_13;
 800422a:	230d      	movs	r3, #13
 800422c:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_Config_t.GPIO_PinMode = GPIO_MODE_INPUT;
 800422e:	2300      	movs	r3, #0
 8004230:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_Config_t.GPIO_PinSpeed = GPIO_SPEED_HIGH_SPEED;
 8004232:	2302      	movs	r3, #2
 8004234:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_Config_t.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 8004236:	2300      	movs	r3, #0
 8004238:	74fb      	strb	r3, [r7, #19]

	GPIO_INIT(&GPIOBtn);
 800423a:	f107 030c 	add.w	r3, r7, #12
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fa0e 	bl	8004660 <GPIO_INIT>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOA;
 8004244:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004248:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_Config_t.GPIO_PinNumber = GPIO_PIN_NO_5;
 800424a:	2305      	movs	r3, #5
 800424c:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_Config_t.GPIO_PinMode = GPIO_MODE_OUTPUT;
 800424e:	2301      	movs	r3, #1
 8004250:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_Config_t.GPIO_PinSpeed = GPIO_SPEED_HIGH_SPEED;
 8004252:	2302      	movs	r3, #2
 8004254:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_Config_t.GPIO_PinOPType = GPIO_TYPE_PUSH_PULL;
 8004256:	2300      	movs	r3, #0
 8004258:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_Config_t.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 800425a:	2300      	movs	r3, #0
 800425c:	71fb      	strb	r3, [r7, #7]

	GPIO_INIT(&GpioLed);
 800425e:	463b      	mov	r3, r7
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f9fd 	bl	8004660 <GPIO_INIT>

}
 8004266:	bf00      	nop
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	48000800 	.word	0x48000800

08004274 <delays>:



void delays(void)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 200000/2 ; i ++);
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	e002      	b.n	8004286 <delays+0x12>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3301      	adds	r3, #1
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a04      	ldr	r2, [pc, #16]	@ (800429c <delays+0x28>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d9f8      	bls.n	8004280 <delays+0xc>
}
 800428e:	bf00      	nop
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	0001869f 	.word	0x0001869f

080042a0 <main>:




int main(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
   GPIO_ButtonInit(); // optional, for bootloader button
 80042a4:	f7ff ffbc 	bl	8004220 <GPIO_ButtonInit>
//   USART2_GPIOInit();
   USART2_Init();
 80042a8:	f7ff ff98 	bl	80041dc <USART2_Init>
 // USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
   USART_PeripheralControl(USART2, ENABLE);
 80042ac:	2101      	movs	r1, #1
 80042ae:	480b      	ldr	r0, [pc, #44]	@ (80042dc <main+0x3c>)
 80042b0:	f000 fd4d 	bl	8004d4e <USART_PeripheralControl>



while (1)
{
	 USART_SEND_DATA(&usart_handle, (uint8_t*)msg, strlen(msg));
 80042b4:	480a      	ldr	r0, [pc, #40]	@ (80042e0 <main+0x40>)
 80042b6:	f7ff ff89 	bl	80041cc <strlen>
 80042ba:	4603      	mov	r3, r0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	4907      	ldr	r1, [pc, #28]	@ (80042e0 <main+0x40>)
 80042c2:	4808      	ldr	r0, [pc, #32]	@ (80042e4 <main+0x44>)
 80042c4:	f000 fcf4 	bl	8004cb0 <USART_SEND_DATA>
	 delays();
 80042c8:	f7ff ffd4 	bl	8004274 <delays>
  GPIO_TOGGLE_PIN(GPIOA, GPIO_PIN_NO_5);
 80042cc:	2105      	movs	r1, #5
 80042ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042d2:	f000 fbcb 	bl	8004a6c <GPIO_TOGGLE_PIN>
	 USART_SEND_DATA(&usart_handle, (uint8_t*)msg, strlen(msg));
 80042d6:	bf00      	nop
 80042d8:	e7ec      	b.n	80042b4 <main+0x14>
 80042da:	bf00      	nop
 80042dc:	40004400 	.word	0x40004400
 80042e0:	20000000 	.word	0x20000000
 80042e4:	2000004c 	.word	0x2000004c

080042e8 <USART2_IRQHandler>:
 }



void USART2_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
    USART_IRQHandling(&usart_handle);
 80042ec:	4802      	ldr	r0, [pc, #8]	@ (80042f8 <USART2_IRQHandler+0x10>)
 80042ee:	f000 fd9b 	bl	8004e28 <USART_IRQHandling>
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	2000004c 	.word	0x2000004c

080042fc <SystemInit>:

void SystemInit(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
    /* Standard clock setup... */

    /* Relocate vector table */
    SCB->VTOR = 0x0800C000;
 8004300:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004304:	4a02      	ldr	r2, [pc, #8]	@ (8004310 <SystemInit+0x14>)
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	bf00      	nop
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr
 8004310:	0800c000 	.word	0x0800c000

08004314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004314:	480d      	ldr	r0, [pc, #52]	@ (800434c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004318:	f7ff fff0 	bl	80042fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800431c:	480c      	ldr	r0, [pc, #48]	@ (8004350 <LoopForever+0x6>)
  ldr r1, =_edata
 800431e:	490d      	ldr	r1, [pc, #52]	@ (8004354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004320:	4a0d      	ldr	r2, [pc, #52]	@ (8004358 <LoopForever+0xe>)
  movs r3, #0
 8004322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004324:	e002      	b.n	800432c <LoopCopyDataInit>

08004326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800432a:	3304      	adds	r3, #4

0800432c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800432c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800432e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004330:	d3f9      	bcc.n	8004326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004332:	4a0a      	ldr	r2, [pc, #40]	@ (800435c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004334:	4c0a      	ldr	r4, [pc, #40]	@ (8004360 <LoopForever+0x16>)
  movs r3, #0
 8004336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004338:	e001      	b.n	800433e <LoopFillZerobss>

0800433a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800433a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800433c:	3204      	adds	r2, #4

0800433e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800433e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004340:	d3fb      	bcc.n	800433a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8004342:	f000 ff4f 	bl	80051e4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8004346:	f7ff ffab 	bl	80042a0 <main>

0800434a <LoopForever>:

LoopForever:
  b LoopForever
 800434a:	e7fe      	b.n	800434a <LoopForever>
  ldr   r0, =_estack
 800434c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004354:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8004358:	08005254 	.word	0x08005254
  ldr r2, =_sbss
 800435c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8004360:	20000068 	.word	0x20000068

08004364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004364:	e7fe      	b.n	8004364 <ADC1_2_IRQHandler>
	...

08004368 <RCC_GetMSIClock>:

#define HSE_VALUE 8000000U


static uint32_t RCC_GetMSIClock(void)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0

    uint32_t msirange = (RCC->CR >> 4) & 0xF;
 800436e:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <RCC_GetMSIClock+0x8c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	607b      	str	r3, [r7, #4]

    switch(msirange)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b0b      	cmp	r3, #11
 800437e:	d833      	bhi.n	80043e8 <RCC_GetMSIClock+0x80>
 8004380:	a201      	add	r2, pc, #4	@ (adr r2, 8004388 <RCC_GetMSIClock+0x20>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043b9 	.word	0x080043b9
 800438c:	080043bd 	.word	0x080043bd
 8004390:	080043c1 	.word	0x080043c1
 8004394:	080043c5 	.word	0x080043c5
 8004398:	080043c9 	.word	0x080043c9
 800439c:	080043cd 	.word	0x080043cd
 80043a0:	080043d1 	.word	0x080043d1
 80043a4:	080043d5 	.word	0x080043d5
 80043a8:	080043d9 	.word	0x080043d9
 80043ac:	080043dd 	.word	0x080043dd
 80043b0:	080043e1 	.word	0x080043e1
 80043b4:	080043e5 	.word	0x080043e5
    {
        case 0:  return 100000;   // 100 kHz
 80043b8:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <RCC_GetMSIClock+0x90>)
 80043ba:	e016      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 1:  return 200000;   // 200 kHz
 80043bc:	4b0f      	ldr	r3, [pc, #60]	@ (80043fc <RCC_GetMSIClock+0x94>)
 80043be:	e014      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 2:  return 400000;   // 400 kHz
 80043c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004400 <RCC_GetMSIClock+0x98>)
 80043c2:	e012      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 3:  return 800000;   // 800 kHz
 80043c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004404 <RCC_GetMSIClock+0x9c>)
 80043c6:	e010      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 4:  return 1000000;  // 1 MHz
 80043c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004408 <RCC_GetMSIClock+0xa0>)
 80043ca:	e00e      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 5:  return 2000000;  // 2 MHz
 80043cc:	4b0f      	ldr	r3, [pc, #60]	@ (800440c <RCC_GetMSIClock+0xa4>)
 80043ce:	e00c      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 6:  return 4000000;  // 4 MHz
 80043d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004410 <RCC_GetMSIClock+0xa8>)
 80043d2:	e00a      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 7:  return 8000000;  // 8 MHz
 80043d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004414 <RCC_GetMSIClock+0xac>)
 80043d6:	e008      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 8:  return 16000000; // 16 MHz
 80043d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004418 <RCC_GetMSIClock+0xb0>)
 80043da:	e006      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 9:  return 24000000; // 24 MHz
 80043dc:	4b0f      	ldr	r3, [pc, #60]	@ (800441c <RCC_GetMSIClock+0xb4>)
 80043de:	e004      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 10: return 32000000; // 32 MHz
 80043e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004420 <RCC_GetMSIClock+0xb8>)
 80043e2:	e002      	b.n	80043ea <RCC_GetMSIClock+0x82>
        case 11: return 48000000; // 48 MHz
 80043e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004424 <RCC_GetMSIClock+0xbc>)
 80043e6:	e000      	b.n	80043ea <RCC_GetMSIClock+0x82>
        default: return 4000000;  // default safe fallback
 80043e8:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <RCC_GetMSIClock+0xa8>)
    }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	40021000 	.word	0x40021000
 80043f8:	000186a0 	.word	0x000186a0
 80043fc:	00030d40 	.word	0x00030d40
 8004400:	00061a80 	.word	0x00061a80
 8004404:	000c3500 	.word	0x000c3500
 8004408:	000f4240 	.word	0x000f4240
 800440c:	001e8480 	.word	0x001e8480
 8004410:	003d0900 	.word	0x003d0900
 8004414:	007a1200 	.word	0x007a1200
 8004418:	00f42400 	.word	0x00f42400
 800441c:	016e3600 	.word	0x016e3600
 8004420:	01e84800 	.word	0x01e84800
 8004424:	02dc6c00 	.word	0x02dc6c00

08004428 <RCC_GetPLLOutputClock>:

 uint32_t RCC_GetPLLOutputClock(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
    uint32_t pll_src, pll_m, pll_n, pll_r;
    uint32_t pll_input, pll_vco;

    pll_src = (RCC->PLLCFGR >> 0) & 0x3;   // PLLSRC bits [1:0]
 800442e:	4b21      	ldr	r3, [pc, #132]	@ (80044b4 <RCC_GetPLLOutputClock+0x8c>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	613b      	str	r3, [r7, #16]
    pll_m   = ((RCC->PLLCFGR >> 4) & 0x7) + 1;  // PLLM (÷1..÷8)
 8004438:	4b1e      	ldr	r3, [pc, #120]	@ (80044b4 <RCC_GetPLLOutputClock+0x8c>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	3301      	adds	r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
    pll_n   = (RCC->PLLCFGR >> 8) & 0x7F;       // PLLN (8..86)
 8004446:	4b1b      	ldr	r3, [pc, #108]	@ (80044b4 <RCC_GetPLLOutputClock+0x8c>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004450:	60bb      	str	r3, [r7, #8]
    pll_r   = (((RCC->PLLCFGR >> 25) & 0x3) + 1) * 2; // PLLR (÷2,4,6,8)
 8004452:	4b18      	ldr	r3, [pc, #96]	@ (80044b4 <RCC_GetPLLOutputClock+0x8c>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	0e5b      	lsrs	r3, r3, #25
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	3301      	adds	r3, #1
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	607b      	str	r3, [r7, #4]

    // PLL input clock
    switch(pll_src)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d00f      	beq.n	8004488 <RCC_GetPLLOutputClock+0x60>
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d810      	bhi.n	8004490 <RCC_GetPLLOutputClock+0x68>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d003      	beq.n	800447c <RCC_GetPLLOutputClock+0x54>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d003      	beq.n	8004482 <RCC_GetPLLOutputClock+0x5a>
 800447a:	e009      	b.n	8004490 <RCC_GetPLLOutputClock+0x68>
    {
        case 1: pll_input = 16000000; break;         // HSI16
 800447c:	4b0e      	ldr	r3, [pc, #56]	@ (80044b8 <RCC_GetPLLOutputClock+0x90>)
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e008      	b.n	8004494 <RCC_GetPLLOutputClock+0x6c>
        case 2: pll_input = HSE_VALUE; break;        // HSE
 8004482:	4b0e      	ldr	r3, [pc, #56]	@ (80044bc <RCC_GetPLLOutputClock+0x94>)
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e005      	b.n	8004494 <RCC_GetPLLOutputClock+0x6c>
        case 3: pll_input = RCC_GetMSIClock(); break; // MSI
 8004488:	f7ff ff6e 	bl	8004368 <RCC_GetMSIClock>
 800448c:	6178      	str	r0, [r7, #20]
 800448e:	e001      	b.n	8004494 <RCC_GetPLLOutputClock+0x6c>
        default: return 0; // No source
 8004490:	2300      	movs	r3, #0
 8004492:	e00b      	b.n	80044ac <RCC_GetPLLOutputClock+0x84>
    }

    pll_vco = (pll_input / pll_m) * pll_n;   // VCO frequency
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	fbb2 f2f3 	udiv	r2, r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	603b      	str	r3, [r7, #0]
    return pll_vco / pll_r;                  // PLLR output
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200

080044c0 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
    uint32_t SystemClock, pclk1;
    uint8_t ahbp, apb1p;

    uint8_t clk_src = (RCC->CFGR >> 2) & 0x3; // SWS bits
 80044c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004578 <RCC_GetPCLK1Value+0xb8>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	727b      	strb	r3, [r7, #9]

    switch(clk_src)
 80044d4:	7a7b      	ldrb	r3, [r7, #9]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d818      	bhi.n	800450c <RCC_GetPCLK1Value+0x4c>
 80044da:	a201      	add	r2, pc, #4	@ (adr r2, 80044e0 <RCC_GetPCLK1Value+0x20>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	080044f1 	.word	0x080044f1
 80044e4:	080044f9 	.word	0x080044f9
 80044e8:	080044ff 	.word	0x080044ff
 80044ec:	08004505 	.word	0x08004505
    {
        case 0: SystemClock = RCC_GetMSIClock(); break;
 80044f0:	f7ff ff3a 	bl	8004368 <RCC_GetMSIClock>
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	e00c      	b.n	8004512 <RCC_GetPCLK1Value+0x52>
        case 1: SystemClock = 16000000; break; // HSI16
 80044f8:	4b20      	ldr	r3, [pc, #128]	@ (800457c <RCC_GetPCLK1Value+0xbc>)
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e009      	b.n	8004512 <RCC_GetPCLK1Value+0x52>
        case 2: SystemClock = HSE_VALUE; break;
 80044fe:	4b20      	ldr	r3, [pc, #128]	@ (8004580 <RCC_GetPCLK1Value+0xc0>)
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	e006      	b.n	8004512 <RCC_GetPCLK1Value+0x52>
        case 3: SystemClock = RCC_GetPLLOutputClock(); break;
 8004504:	f7ff ff90 	bl	8004428 <RCC_GetPLLOutputClock>
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	e002      	b.n	8004512 <RCC_GetPCLK1Value+0x52>
        default: SystemClock = 4000000; break;
 800450c:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <RCC_GetPCLK1Value+0xc4>)
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	bf00      	nop
    }

    // AHB prescaler
    uint8_t tmp = (RCC->CFGR >> 4) & 0xF;
 8004512:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <RCC_GetPCLK1Value+0xb8>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	723b      	strb	r3, [r7, #8]
    if(tmp < 8) ahbp = 1;
 8004520:	7a3b      	ldrb	r3, [r7, #8]
 8004522:	2b07      	cmp	r3, #7
 8004524:	d802      	bhi.n	800452c <RCC_GetPCLK1Value+0x6c>
 8004526:	2301      	movs	r3, #1
 8004528:	72fb      	strb	r3, [r7, #11]
 800452a:	e005      	b.n	8004538 <RCC_GetPCLK1Value+0x78>
    else ahbp = AHB_PreScaler[tmp-8];
 800452c:	7a3b      	ldrb	r3, [r7, #8]
 800452e:	3b08      	subs	r3, #8
 8004530:	4a15      	ldr	r2, [pc, #84]	@ (8004588 <RCC_GetPCLK1Value+0xc8>)
 8004532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004536:	72fb      	strb	r3, [r7, #11]

    // APB1 prescaler
    tmp = (RCC->CFGR >> 10) & 0x7;
 8004538:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <RCC_GetPCLK1Value+0xb8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	0a9b      	lsrs	r3, r3, #10
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	723b      	strb	r3, [r7, #8]
    if(tmp < 4) apb1p = 1;
 8004546:	7a3b      	ldrb	r3, [r7, #8]
 8004548:	2b03      	cmp	r3, #3
 800454a:	d802      	bhi.n	8004552 <RCC_GetPCLK1Value+0x92>
 800454c:	2301      	movs	r3, #1
 800454e:	72bb      	strb	r3, [r7, #10]
 8004550:	e004      	b.n	800455c <RCC_GetPCLK1Value+0x9c>
    else apb1p = APB_PreScaler[tmp-4];
 8004552:	7a3b      	ldrb	r3, [r7, #8]
 8004554:	3b04      	subs	r3, #4
 8004556:	4a0d      	ldr	r2, [pc, #52]	@ (800458c <RCC_GetPCLK1Value+0xcc>)
 8004558:	5cd3      	ldrb	r3, [r2, r3]
 800455a:	72bb      	strb	r3, [r7, #10]

    pclk1 = (SystemClock / ahbp) / apb1p;
 800455c:	7afb      	ldrb	r3, [r7, #11]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	fbb2 f2f3 	udiv	r2, r2, r3
 8004564:	7abb      	ldrb	r3, [r7, #10]
 8004566:	fbb2 f3f3 	udiv	r3, r2, r3
 800456a:	607b      	str	r3, [r7, #4]
    return pclk1;
 800456c:	687b      	ldr	r3, [r7, #4]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	00f42400 	.word	0x00f42400
 8004580:	007a1200 	.word	0x007a1200
 8004584:	003d0900 	.word	0x003d0900
 8004588:	2000001c 	.word	0x2000001c
 800458c:	2000002c 	.word	0x2000002c

08004590 <RCC_GetPCLK2Value>:


uint32_t RCC_GetPCLK2Value(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
    uint32_t SystemClock, pclk2;
    uint8_t ahbp, apb2p;

    uint8_t clk_src = (RCC->CFGR >> 2) & 0x3;
 8004596:	4b2c      	ldr	r3, [pc, #176]	@ (8004648 <RCC_GetPCLK2Value+0xb8>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	727b      	strb	r3, [r7, #9]

    switch(clk_src)
 80045a4:	7a7b      	ldrb	r3, [r7, #9]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d818      	bhi.n	80045dc <RCC_GetPCLK2Value+0x4c>
 80045aa:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <RCC_GetPCLK2Value+0x20>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045c9 	.word	0x080045c9
 80045b8:	080045cf 	.word	0x080045cf
 80045bc:	080045d5 	.word	0x080045d5
    {
        case 0: SystemClock = RCC_GetMSIClock(); break;
 80045c0:	f7ff fed2 	bl	8004368 <RCC_GetMSIClock>
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	e00c      	b.n	80045e2 <RCC_GetPCLK2Value+0x52>
        case 1: SystemClock = 16000000; break;
 80045c8:	4b20      	ldr	r3, [pc, #128]	@ (800464c <RCC_GetPCLK2Value+0xbc>)
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e009      	b.n	80045e2 <RCC_GetPCLK2Value+0x52>
        case 2: SystemClock = HSE_VALUE; break;
 80045ce:	4b20      	ldr	r3, [pc, #128]	@ (8004650 <RCC_GetPCLK2Value+0xc0>)
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e006      	b.n	80045e2 <RCC_GetPCLK2Value+0x52>
        case 3: SystemClock = RCC_GetPLLOutputClock(); break;
 80045d4:	f7ff ff28 	bl	8004428 <RCC_GetPLLOutputClock>
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	e002      	b.n	80045e2 <RCC_GetPCLK2Value+0x52>
        default: SystemClock = 4000000; break;
 80045dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004654 <RCC_GetPCLK2Value+0xc4>)
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	bf00      	nop
    }

    // AHB prescaler
    uint8_t tmp = (RCC->CFGR >> 4) & 0xF;
 80045e2:	4b19      	ldr	r3, [pc, #100]	@ (8004648 <RCC_GetPCLK2Value+0xb8>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	091b      	lsrs	r3, r3, #4
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	723b      	strb	r3, [r7, #8]
    if(tmp < 8) ahbp = 1;
 80045f0:	7a3b      	ldrb	r3, [r7, #8]
 80045f2:	2b07      	cmp	r3, #7
 80045f4:	d802      	bhi.n	80045fc <RCC_GetPCLK2Value+0x6c>
 80045f6:	2301      	movs	r3, #1
 80045f8:	72fb      	strb	r3, [r7, #11]
 80045fa:	e005      	b.n	8004608 <RCC_GetPCLK2Value+0x78>
    else ahbp = AHB_PreScaler[tmp-8];
 80045fc:	7a3b      	ldrb	r3, [r7, #8]
 80045fe:	3b08      	subs	r3, #8
 8004600:	4a15      	ldr	r2, [pc, #84]	@ (8004658 <RCC_GetPCLK2Value+0xc8>)
 8004602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004606:	72fb      	strb	r3, [r7, #11]

    // APB2 prescaler
    tmp = (RCC->CFGR >> 11) & 0x7;
 8004608:	4b0f      	ldr	r3, [pc, #60]	@ (8004648 <RCC_GetPCLK2Value+0xb8>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	0adb      	lsrs	r3, r3, #11
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	723b      	strb	r3, [r7, #8]
    if(tmp < 4) apb2p = 1;
 8004616:	7a3b      	ldrb	r3, [r7, #8]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d802      	bhi.n	8004622 <RCC_GetPCLK2Value+0x92>
 800461c:	2301      	movs	r3, #1
 800461e:	72bb      	strb	r3, [r7, #10]
 8004620:	e004      	b.n	800462c <RCC_GetPCLK2Value+0x9c>
    else apb2p = APB_PreScaler[tmp-4];
 8004622:	7a3b      	ldrb	r3, [r7, #8]
 8004624:	3b04      	subs	r3, #4
 8004626:	4a0d      	ldr	r2, [pc, #52]	@ (800465c <RCC_GetPCLK2Value+0xcc>)
 8004628:	5cd3      	ldrb	r3, [r2, r3]
 800462a:	72bb      	strb	r3, [r7, #10]

    pclk2 = (SystemClock / ahbp) / apb2p;
 800462c:	7afb      	ldrb	r3, [r7, #11]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	fbb2 f2f3 	udiv	r2, r2, r3
 8004634:	7abb      	ldrb	r3, [r7, #10]
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	607b      	str	r3, [r7, #4]
    return pclk2;
 800463c:	687b      	ldr	r3, [r7, #4]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	00f42400 	.word	0x00f42400
 8004650:	007a1200 	.word	0x007a1200
 8004654:	003d0900 	.word	0x003d0900
 8004658:	2000001c 	.word	0x2000001c
 800465c:	2000002c 	.word	0x2000002c

08004660 <GPIO_INIT>:



//init and deinit apii
void GPIO_INIT(GPIO_Handle_t *pGPIOhandle)
{   //clk enable for the gpio
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	GPIO_PERI_CTRL(pGPIOhandle->pGPIOx, ENABLE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f916 	bl	80048a0 <GPIO_PERI_CTRL>

uint32_t tempreg;

if(pGPIOhandle->GPIO_Config_t.GPIO_PinMode <= GPIO_MODE_ANALOG )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	795b      	ldrb	r3, [r3, #5]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d820      	bhi.n	80046be <GPIO_INIT+0x5e>
{
	//non interrupt mode
	tempreg = (pGPIOhandle->GPIO_Config_t.GPIO_PinMode <<  (2 * pGPIOhandle->GPIO_Config_t.GPIO_PinNumber));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	795b      	ldrb	r3, [r3, #5]
 8004680:	461a      	mov	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	791b      	ldrb	r3, [r3, #4]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	60fb      	str	r3, [r7, #12]
	//clear the register
	pGPIOhandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOhandle->GPIO_Config_t.GPIO_PinNumber));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	791b      	ldrb	r3, [r3, #4]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	2103      	movs	r1, #3
 800469c:	fa01 f303 	lsl.w	r3, r1, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	4619      	mov	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	400a      	ands	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
	pGPIOhandle->pGPIOx->MODER |= tempreg;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e04f      	b.n	800475e <GPIO_INIT+0xfe>
}
else
{
	//interrupt mode
	if(pGPIOhandle->GPIO_Config_t.GPIO_PinMode == GPIO_MODE_IT_FT)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	795b      	ldrb	r3, [r3, #5]
 80046c2:	2b05      	cmp	r3, #5
 80046c4:	d116      	bne.n	80046f4 <GPIO_INIT+0x94>
	{
		EXTI->FTSR1 |= (1 << pGPIOhandle->GPIO_Config_t.GPIO_PinNumber)  ;
 80046c6:	4b75      	ldr	r3, [pc, #468]	@ (800489c <GPIO_INIT+0x23c>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	7912      	ldrb	r2, [r2, #4]
 80046ce:	4611      	mov	r1, r2
 80046d0:	2201      	movs	r2, #1
 80046d2:	408a      	lsls	r2, r1
 80046d4:	4611      	mov	r1, r2
 80046d6:	4a71      	ldr	r2, [pc, #452]	@ (800489c <GPIO_INIT+0x23c>)
 80046d8:	430b      	orrs	r3, r1
 80046da:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR1 &= ~(1 << pGPIOhandle->GPIO_Config_t.GPIO_PinNumber)  ;
 80046dc:	4b6f      	ldr	r3, [pc, #444]	@ (800489c <GPIO_INIT+0x23c>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	7912      	ldrb	r2, [r2, #4]
 80046e4:	4611      	mov	r1, r2
 80046e6:	2201      	movs	r2, #1
 80046e8:	408a      	lsls	r2, r1
 80046ea:	43d2      	mvns	r2, r2
 80046ec:	4611      	mov	r1, r2
 80046ee:	4a6b      	ldr	r2, [pc, #428]	@ (800489c <GPIO_INIT+0x23c>)
 80046f0:	400b      	ands	r3, r1
 80046f2:	6093      	str	r3, [r2, #8]
	}
	if(pGPIOhandle->GPIO_Config_t.GPIO_PinMode == GPIO_MODE_IT_RT)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	795b      	ldrb	r3, [r3, #5]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d116      	bne.n	800472a <GPIO_INIT+0xca>
	{
		EXTI->FTSR1 &= ~(1 << pGPIOhandle->GPIO_Config_t.GPIO_PinNumber)  ;
 80046fc:	4b67      	ldr	r3, [pc, #412]	@ (800489c <GPIO_INIT+0x23c>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	7912      	ldrb	r2, [r2, #4]
 8004704:	4611      	mov	r1, r2
 8004706:	2201      	movs	r2, #1
 8004708:	408a      	lsls	r2, r1
 800470a:	43d2      	mvns	r2, r2
 800470c:	4611      	mov	r1, r2
 800470e:	4a63      	ldr	r2, [pc, #396]	@ (800489c <GPIO_INIT+0x23c>)
 8004710:	400b      	ands	r3, r1
 8004712:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR1 |= (1 << pGPIOhandle->GPIO_Config_t.GPIO_PinNumber)  ;
 8004714:	4b61      	ldr	r3, [pc, #388]	@ (800489c <GPIO_INIT+0x23c>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	7912      	ldrb	r2, [r2, #4]
 800471c:	4611      	mov	r1, r2
 800471e:	2201      	movs	r2, #1
 8004720:	408a      	lsls	r2, r1
 8004722:	4611      	mov	r1, r2
 8004724:	4a5d      	ldr	r2, [pc, #372]	@ (800489c <GPIO_INIT+0x23c>)
 8004726:	430b      	orrs	r3, r1
 8004728:	6093      	str	r3, [r2, #8]
	}

	if(pGPIOhandle->GPIO_Config_t.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	795b      	ldrb	r3, [r3, #5]
 800472e:	2b06      	cmp	r3, #6
 8004730:	d115      	bne.n	800475e <GPIO_INIT+0xfe>
	{

		EXTI->FTSR1 |= (1 << pGPIOhandle->GPIO_Config_t.GPIO_PinNumber)  ;
 8004732:	4b5a      	ldr	r3, [pc, #360]	@ (800489c <GPIO_INIT+0x23c>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	7912      	ldrb	r2, [r2, #4]
 800473a:	4611      	mov	r1, r2
 800473c:	2201      	movs	r2, #1
 800473e:	408a      	lsls	r2, r1
 8004740:	4611      	mov	r1, r2
 8004742:	4a56      	ldr	r2, [pc, #344]	@ (800489c <GPIO_INIT+0x23c>)
 8004744:	430b      	orrs	r3, r1
 8004746:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR1 |= (1 << pGPIOhandle->GPIO_Config_t.GPIO_PinNumber)  ;
 8004748:	4b54      	ldr	r3, [pc, #336]	@ (800489c <GPIO_INIT+0x23c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	7912      	ldrb	r2, [r2, #4]
 8004750:	4611      	mov	r1, r2
 8004752:	2201      	movs	r2, #1
 8004754:	408a      	lsls	r2, r1
 8004756:	4611      	mov	r1, r2
 8004758:	4a50      	ldr	r2, [pc, #320]	@ (800489c <GPIO_INIT+0x23c>)
 800475a:	430b      	orrs	r3, r1
 800475c:	6093      	str	r3, [r2, #8]
	}
}

//configure the output type
tempreg = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
tempreg = (pGPIOhandle->GPIO_Config_t.GPIO_PinSpeed << (2 * pGPIOhandle->GPIO_Config_t.GPIO_PinNumber));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	799b      	ldrb	r3, [r3, #6]
 8004766:	461a      	mov	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	791b      	ldrb	r3, [r3, #4]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	60fb      	str	r3, [r7, #12]
pGPIOhandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOhandle->GPIO_Config_t.GPIO_PinNumber));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	791b      	ldrb	r3, [r3, #4]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	2103      	movs	r1, #3
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	4619      	mov	r1, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	400a      	ands	r2, r1
 8004790:	609a      	str	r2, [r3, #8]
pGPIOhandle->pGPIOx->OSPEEDR|= tempreg;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6899      	ldr	r1, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	430a      	orrs	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]

//configure the pupd
tempreg =0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
tempreg = (pGPIOhandle->GPIO_Config_t.GPIO_PinPuPdControl << (2 * pGPIOhandle->GPIO_Config_t.GPIO_PinNumber));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	79db      	ldrb	r3, [r3, #7]
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	791b      	ldrb	r3, [r3, #4]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	60fb      	str	r3, [r7, #12]
pGPIOhandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOhandle->GPIO_Config_t.GPIO_PinNumber));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	791b      	ldrb	r3, [r3, #4]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	2103      	movs	r1, #3
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	4619      	mov	r1, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	400a      	ands	r2, r1
 80047d4:	60da      	str	r2, [r3, #12]
pGPIOhandle->pGPIOx->PUPDR |= tempreg;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68d9      	ldr	r1, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	60da      	str	r2, [r3, #12]


tempreg = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
// output type
tempreg = (pGPIOhandle->GPIO_Config_t.GPIO_PinOPType <<  (pGPIOhandle->GPIO_Config_t.GPIO_PinNumber));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	7a1b      	ldrb	r3, [r3, #8]
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	791b      	ldrb	r3, [r3, #4]
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	60fb      	str	r3, [r7, #12]
pGPIOhandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOhandle->GPIO_Config_t.GPIO_PinNumber) );
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	791b      	ldrb	r3, [r3, #4]
 8004804:	4619      	mov	r1, r3
 8004806:	2301      	movs	r3, #1
 8004808:	408b      	lsls	r3, r1
 800480a:	43db      	mvns	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	400a      	ands	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
pGPIOhandle->pGPIOx->OTYPER |= tempreg;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]

//configure the alternate functionility

if(pGPIOhandle->GPIO_Config_t.GPIO_PinMode ==GPIO_MODE_ALTERNATE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	795b      	ldrb	r3, [r3, #5]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d131      	bne.n	8004892 <GPIO_INIT+0x232>
{
	uint8_t temp1, temp2;
	temp1 = pGPIOhandle->GPIO_Config_t.GPIO_PinNumber /8;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	791b      	ldrb	r3, [r3, #4]
 8004832:	08db      	lsrs	r3, r3, #3
 8004834:	72fb      	strb	r3, [r7, #11]
	temp2 = pGPIOhandle->GPIO_Config_t.GPIO_PinNumber %8;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	791b      	ldrb	r3, [r3, #4]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	72bb      	strb	r3, [r7, #10]
	pGPIOhandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	7afa      	ldrb	r2, [r7, #11]
 8004846:	3208      	adds	r2, #8
 8004848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800484c:	7abb      	ldrb	r3, [r7, #10]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	220f      	movs	r2, #15
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	4618      	mov	r0, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	7afa      	ldrb	r2, [r7, #11]
 8004860:	4001      	ands	r1, r0
 8004862:	3208      	adds	r2, #8
 8004864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIOhandle->pGPIOx->AFR[temp1] |= (pGPIOhandle->GPIO_Config_t.GPIO_PinAltFunMode << (4 * temp2));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	7afa      	ldrb	r2, [r7, #11]
 800486e:	3208      	adds	r2, #8
 8004870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	7a5b      	ldrb	r3, [r3, #9]
 8004878:	461a      	mov	r2, r3
 800487a:	7abb      	ldrb	r3, [r7, #10]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	4618      	mov	r0, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	7afa      	ldrb	r2, [r7, #11]
 800488a:	4301      	orrs	r1, r0
 800488c:	3208      	adds	r2, #8
 800488e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}

}
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40010400 	.word	0x40010400

080048a0 <GPIO_PERI_CTRL>:
		}
}

//peripheral control for the gpio
void GPIO_PERI_CTRL(GPIO_RegDef_t *pGPIOx, uint8_t ENORDI)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
	if(ENORDI == ENABLE)
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d162      	bne.n	8004978 <GPIO_PERI_CTRL+0xd8>
	{
		if(pGPIOx == GPIOA)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80048b8:	d106      	bne.n	80048c8 <GPIO_PERI_CTRL+0x28>
		{
			GPIOA_CLK_EN;
 80048ba:	4b63      	ldr	r3, [pc, #396]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80048bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048be:	4a62      	ldr	r2, [pc, #392]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
						{
							GPIOI_CLK_DI;
						}

	}
}
 80048c6:	e0b9      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
		else if(pGPIOx == GPIOB)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a60      	ldr	r2, [pc, #384]	@ (8004a4c <GPIO_PERI_CTRL+0x1ac>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d106      	bne.n	80048de <GPIO_PERI_CTRL+0x3e>
			GPIOB_CLK_EN;
 80048d0:	4b5d      	ldr	r3, [pc, #372]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80048d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d4:	4a5c      	ldr	r2, [pc, #368]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80048d6:	f043 0302 	orr.w	r3, r3, #2
 80048da:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80048dc:	e0ae      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
		else if(pGPIOx == GPIOC)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a5b      	ldr	r2, [pc, #364]	@ (8004a50 <GPIO_PERI_CTRL+0x1b0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d106      	bne.n	80048f4 <GPIO_PERI_CTRL+0x54>
					GPIOC_CLK_EN;
 80048e6:	4b58      	ldr	r3, [pc, #352]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80048e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ea:	4a57      	ldr	r2, [pc, #348]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80048f2:	e0a3      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
		else if(pGPIOx == GPIOD)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a57      	ldr	r2, [pc, #348]	@ (8004a54 <GPIO_PERI_CTRL+0x1b4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d106      	bne.n	800490a <GPIO_PERI_CTRL+0x6a>
					GPIOD_CLK_EN;
 80048fc:	4b52      	ldr	r3, [pc, #328]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80048fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004900:	4a51      	ldr	r2, [pc, #324]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004902:	f043 0308 	orr.w	r3, r3, #8
 8004906:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8004908:	e098      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
		else if(pGPIOx == GPIOE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a52      	ldr	r2, [pc, #328]	@ (8004a58 <GPIO_PERI_CTRL+0x1b8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d106      	bne.n	8004920 <GPIO_PERI_CTRL+0x80>
					GPIOE_CLK_EN;
 8004912:	4b4d      	ldr	r3, [pc, #308]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004916:	4a4c      	ldr	r2, [pc, #304]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004918:	f043 0310 	orr.w	r3, r3, #16
 800491c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800491e:	e08d      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
		else if(pGPIOx == GPIOF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a4e      	ldr	r2, [pc, #312]	@ (8004a5c <GPIO_PERI_CTRL+0x1bc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d106      	bne.n	8004936 <GPIO_PERI_CTRL+0x96>
					GPIOF_CLK_EN;
 8004928:	4b47      	ldr	r3, [pc, #284]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 800492a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492c:	4a46      	ldr	r2, [pc, #280]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 800492e:	f043 0320 	orr.w	r3, r3, #32
 8004932:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8004934:	e082      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
		else if(pGPIOx == GPIOG)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a49      	ldr	r2, [pc, #292]	@ (8004a60 <GPIO_PERI_CTRL+0x1c0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d106      	bne.n	800494c <GPIO_PERI_CTRL+0xac>
					GPIOG_CLK_EN;
 800493e:	4b42      	ldr	r3, [pc, #264]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004942:	4a41      	ldr	r2, [pc, #260]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004948:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800494a:	e077      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
		else if(pGPIOx == GPIOH)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a45      	ldr	r2, [pc, #276]	@ (8004a64 <GPIO_PERI_CTRL+0x1c4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d106      	bne.n	8004962 <GPIO_PERI_CTRL+0xc2>
					GPIOH_CLK_EN;
 8004954:	4b3c      	ldr	r3, [pc, #240]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004958:	4a3b      	ldr	r2, [pc, #236]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 800495a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800495e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8004960:	e06c      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
		else if(pGPIOx == GPIOI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a40      	ldr	r2, [pc, #256]	@ (8004a68 <GPIO_PERI_CTRL+0x1c8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d168      	bne.n	8004a3c <GPIO_PERI_CTRL+0x19c>
					GPIOI_CLK_EN;
 800496a:	4b37      	ldr	r3, [pc, #220]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496e:	4a36      	ldr	r2, [pc, #216]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004974:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8004976:	e061      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
		if(pGPIOx == GPIOA)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800497e:	d106      	bne.n	800498e <GPIO_PERI_CTRL+0xee>
					GPIOA_CLK_DI;
 8004980:	4b31      	ldr	r3, [pc, #196]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004984:	4a30      	ldr	r2, [pc, #192]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800498c:	e056      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
				else if(pGPIOx == GPIOB)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2e      	ldr	r2, [pc, #184]	@ (8004a4c <GPIO_PERI_CTRL+0x1ac>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d106      	bne.n	80049a4 <GPIO_PERI_CTRL+0x104>
					GPIOB_CLK_DI;
 8004996:	4b2c      	ldr	r3, [pc, #176]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499a:	4a2b      	ldr	r2, [pc, #172]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 800499c:	f023 0302 	bic.w	r3, r3, #2
 80049a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80049a2:	e04b      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
				else if(pGPIOx == GPIOC)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a50 <GPIO_PERI_CTRL+0x1b0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d106      	bne.n	80049ba <GPIO_PERI_CTRL+0x11a>
							GPIOC_CLK_DI;
 80049ac:	4b26      	ldr	r3, [pc, #152]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80049ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b0:	4a25      	ldr	r2, [pc, #148]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80049b2:	f023 0304 	bic.w	r3, r3, #4
 80049b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80049b8:	e040      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
				else if(pGPIOx == GPIOD)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a25      	ldr	r2, [pc, #148]	@ (8004a54 <GPIO_PERI_CTRL+0x1b4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d106      	bne.n	80049d0 <GPIO_PERI_CTRL+0x130>
							GPIOD_CLK_DI;
 80049c2:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80049c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c6:	4a20      	ldr	r2, [pc, #128]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80049c8:	f023 0308 	bic.w	r3, r3, #8
 80049cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80049ce:	e035      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
				else if(pGPIOx == GPIOE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a21      	ldr	r2, [pc, #132]	@ (8004a58 <GPIO_PERI_CTRL+0x1b8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d106      	bne.n	80049e6 <GPIO_PERI_CTRL+0x146>
							GPIOE_CLK_DI;
 80049d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80049da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80049de:	f023 0310 	bic.w	r3, r3, #16
 80049e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80049e4:	e02a      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
				else if(pGPIOx == GPIOF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a5c <GPIO_PERI_CTRL+0x1bc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d106      	bne.n	80049fc <GPIO_PERI_CTRL+0x15c>
							GPIOF_CLK_DI;
 80049ee:	4b16      	ldr	r3, [pc, #88]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80049f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f2:	4a15      	ldr	r2, [pc, #84]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 80049f4:	f023 0320 	bic.w	r3, r3, #32
 80049f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80049fa:	e01f      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
				else if(pGPIOx == GPIOG)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a18      	ldr	r2, [pc, #96]	@ (8004a60 <GPIO_PERI_CTRL+0x1c0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d106      	bne.n	8004a12 <GPIO_PERI_CTRL+0x172>
							GPIOG_CLK_DI;
 8004a04:	4b10      	ldr	r3, [pc, #64]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a08:	4a0f      	ldr	r2, [pc, #60]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8004a10:	e014      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
				else if(pGPIOx == GPIOH)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a13      	ldr	r2, [pc, #76]	@ (8004a64 <GPIO_PERI_CTRL+0x1c4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d106      	bne.n	8004a28 <GPIO_PERI_CTRL+0x188>
							GPIOH_CLK_DI;
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8004a26:	e009      	b.n	8004a3c <GPIO_PERI_CTRL+0x19c>
				else if(pGPIOx == GPIOI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8004a68 <GPIO_PERI_CTRL+0x1c8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d105      	bne.n	8004a3c <GPIO_PERI_CTRL+0x19c>
							GPIOI_CLK_DI;
 8004a30:	4b05      	ldr	r3, [pc, #20]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a34:	4a04      	ldr	r2, [pc, #16]	@ (8004a48 <GPIO_PERI_CTRL+0x1a8>)
 8004a36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	48000400 	.word	0x48000400
 8004a50:	48000800 	.word	0x48000800
 8004a54:	48000c00 	.word	0x48000c00
 8004a58:	48001000 	.word	0x48001000
 8004a5c:	48001400 	.word	0x48001400
 8004a60:	48001800 	.word	0x48001800
 8004a64:	48001c00 	.word	0x48001c00
 8004a68:	48002000 	.word	0x48002000

08004a6c <GPIO_TOGGLE_PIN>:
void GPIO_WRITE_TO_INPUT_PORT(GPIO_RegDef_t *pGPIOx,uint8_t value)
{
	pGPIOx->ODR = value;
}
void GPIO_TOGGLE_PIN(GPIO_RegDef_t *pGPIOx,uint8_t pinnumber)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<< pinnumber);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	2101      	movs	r1, #1
 8004a80:	fa01 f202 	lsl.w	r2, r1, r2
 8004a84:	405a      	eors	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	615a      	str	r2, [r3, #20]
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <USART_INIT>:

//APIS FOR THE USART

//init and deinit api's
void USART_INIT(USART_Handle_t *pUSARTHandle)
{   //clock for the usart
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
	USART_PER_CLK_CTRL(pUSARTHandle->pUSARTx, ENABLE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f87c 	bl	8004ba0 <USART_PER_CLK_CTRL>
	uint32_t tempreg=0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
	//configure the mode of the usart
	if(pUSARTHandle->USART_Config_t.USART_MODE ==  USART_MODE_ONLY_TX)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	791b      	ldrb	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <USART_INIT+0x2a>
	{
		tempreg |= (1<<3);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f043 0308 	orr.w	r3, r3, #8
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e010      	b.n	8004ae0 <USART_INIT+0x4c>
	}
	else if(pUSARTHandle->USART_Config_t.USART_MODE == USART_MODE_ONLY_RX)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	791b      	ldrb	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d104      	bne.n	8004ad0 <USART_INIT+0x3c>
	{
		tempreg |= (1<<2);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f043 0304 	orr.w	r3, r3, #4
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e007      	b.n	8004ae0 <USART_INIT+0x4c>
	}
	else if(pUSARTHandle->USART_Config_t.USART_MODE == USART_MODE_TXRX)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	791b      	ldrb	r3, [r3, #4]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d103      	bne.n	8004ae0 <USART_INIT+0x4c>
	{
		tempreg  |= ((1<<3)|(1<<2));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f043 030c 	orr.w	r3, r3, #12
 8004ade:	60fb      	str	r3, [r7, #12]
	}

	//configure the length of the data
	tempreg |= ((pUSARTHandle->USART_Config_t.USART_WORD_LEN & 0x2) << 27) \
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	7b5b      	ldrb	r3, [r3, #13]
 8004ae4:	06db      	lsls	r3, r3, #27
 8004ae6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
	        |  ((pUSARTHandle->USART_Config_t.USART_WORD_LEN & 0x1) << 12);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7b5b      	ldrb	r3, [r3, #13]
 8004aee:	031b      	lsls	r3, r3, #12
 8004af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004af4:	4313      	orrs	r3, r2
 8004af6:	461a      	mov	r2, r3
	tempreg |= ((pUSARTHandle->USART_Config_t.USART_WORD_LEN & 0x2) << 27) \
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]


	//configure the parity for the usart
	if(pUSARTHandle->USART_Config_t.USART_PARITY == USART_PARITY_EN_EVEN)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	7b9b      	ldrb	r3, [r3, #14]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d104      	bne.n	8004b10 <USART_INIT+0x7c>
	{
		tempreg|= (1<<10);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e00b      	b.n	8004b28 <USART_INIT+0x94>
		//dont need to configure the even parity by default it is set to zero and enabled
	}
	else if (pUSARTHandle->USART_Config_t.USART_PARITY == USART_PARITY_EN_ODD)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	7b9b      	ldrb	r3, [r3, #14]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <USART_INIT+0x94>
	{
		tempreg|= (1<<10);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b1e:	60fb      	str	r3, [r7, #12]
		//enable the odd parity
		tempreg|= (1<<9);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b26:	60fb      	str	r3, [r7, #12]

	}

	//storing it in the cr1 reg
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	601a      	str	r2, [r3, #0]

	//CONFIGURE THE CR2 REGISTER FOR NO. OF STOP BITS
	tempreg =0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
	tempreg|= pUSARTHandle->USART_Config_t.USART_STOP_BITS << 12;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	7b1b      	ldrb	r3, [r3, #12]
 8004b38:	031b      	lsls	r3, r3, #12
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	605a      	str	r2, [r3, #4]

	//configure the cr3 register
	tempreg =0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
	 if(pUSARTHandle->USART_Config_t.USART_HW_FLOW_CTRL == USART_HW_FLOW_CTRL_CTS)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7bdb      	ldrb	r3, [r3, #15]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d104      	bne.n	8004b5e <USART_INIT+0xca>
	 {
		 tempreg |= (1<<9);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e010      	b.n	8004b80 <USART_INIT+0xec>
	 }
	 else if(pUSARTHandle->USART_Config_t.USART_HW_FLOW_CTRL == USART_HW_FLOW_CTRL_RTS)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	7bdb      	ldrb	r3, [r3, #15]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d104      	bne.n	8004b70 <USART_INIT+0xdc>
	 {
		 tempreg |= (1<<8);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e007      	b.n	8004b80 <USART_INIT+0xec>
	 }
	 else if(pUSARTHandle->USART_Config_t.USART_HW_FLOW_CTRL == USART_HW_FLOW_CTRL_CTS_RTS)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	7bdb      	ldrb	r3, [r3, #15]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d103      	bne.n	8004b80 <USART_INIT+0xec>
	 {
		 tempreg|= ((1<<9)|(1<<8));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004b7e:	60fb      	str	r3, [r7, #12]
	 }

	 //program the cr3 reg
	 pUSARTHandle->pUSARTx->CR3 = tempreg;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	609a      	str	r2, [r3, #8]

	 //configure the brr reg
	  USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config_t.USART_BAUD_RATE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 f90a 	bl	8004dac <USART_SetBaudRate>



}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <USART_PER_CLK_CTRL>:
		}
}

//peripheral clk control
void USART_PER_CLK_CTRL(USART_RegDef_t *pUSARTx, uint8_t ENORDI)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
	if(ENORDI == ENABLE)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d136      	bne.n	8004c20 <USART_PER_CLK_CTRL+0x80>
		{
			if(pUSARTx == USART1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a38      	ldr	r2, [pc, #224]	@ (8004c98 <USART_PER_CLK_CTRL+0xf8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d106      	bne.n	8004bc8 <USART_PER_CLK_CTRL+0x28>
			{
				USART1_CLK_EN;
 8004bba:	4b38      	ldr	r3, [pc, #224]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bbe:	4a37      	ldr	r2, [pc, #220]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bc4:	6613      	str	r3, [r2, #96]	@ 0x60
					else if (pUSARTx == UART5)
					{
						UART5_CLK_DI;
					}
	}
}
 8004bc6:	e061      	b.n	8004c8c <USART_PER_CLK_CTRL+0xec>
			else if(pUSARTx == USART2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a35      	ldr	r2, [pc, #212]	@ (8004ca0 <USART_PER_CLK_CTRL+0x100>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d106      	bne.n	8004bde <USART_PER_CLK_CTRL+0x3e>
				USART2_CLK_EN;
 8004bd0:	4b32      	ldr	r3, [pc, #200]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd4:	4a31      	ldr	r2, [pc, #196]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bda:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8004bdc:	e056      	b.n	8004c8c <USART_PER_CLK_CTRL+0xec>
			else if(pUSARTx == USART3)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a30      	ldr	r2, [pc, #192]	@ (8004ca4 <USART_PER_CLK_CTRL+0x104>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d106      	bne.n	8004bf4 <USART_PER_CLK_CTRL+0x54>
				USART3_CLK_EN;
 8004be6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bea:	4a2c      	ldr	r2, [pc, #176]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bf0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8004bf2:	e04b      	b.n	8004c8c <USART_PER_CLK_CTRL+0xec>
			else if(pUSARTx == UART4)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca8 <USART_PER_CLK_CTRL+0x108>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d106      	bne.n	8004c0a <USART_PER_CLK_CTRL+0x6a>
				UART4_CLK_EN;
 8004bfc:	4b27      	ldr	r3, [pc, #156]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c00:	4a26      	ldr	r2, [pc, #152]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c06:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8004c08:	e040      	b.n	8004c8c <USART_PER_CLK_CTRL+0xec>
			else if (pUSARTx == UART5)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a27      	ldr	r2, [pc, #156]	@ (8004cac <USART_PER_CLK_CTRL+0x10c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d13c      	bne.n	8004c8c <USART_PER_CLK_CTRL+0xec>
				UART5_CLK_EN;
 8004c12:	4b22      	ldr	r3, [pc, #136]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c16:	4a21      	ldr	r2, [pc, #132]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c1c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8004c1e:	e035      	b.n	8004c8c <USART_PER_CLK_CTRL+0xec>
		if(pUSARTx == USART1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a1d      	ldr	r2, [pc, #116]	@ (8004c98 <USART_PER_CLK_CTRL+0xf8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d106      	bne.n	8004c36 <USART_PER_CLK_CTRL+0x96>
						USART1_CLK_DI;
 8004c28:	4b1c      	ldr	r3, [pc, #112]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c32:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8004c34:	e02a      	b.n	8004c8c <USART_PER_CLK_CTRL+0xec>
					else if(pUSARTx == USART2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a19      	ldr	r2, [pc, #100]	@ (8004ca0 <USART_PER_CLK_CTRL+0x100>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d106      	bne.n	8004c4c <USART_PER_CLK_CTRL+0xac>
						USART2_CLK_DI;
 8004c3e:	4b17      	ldr	r3, [pc, #92]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c42:	4a16      	ldr	r2, [pc, #88]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c48:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8004c4a:	e01f      	b.n	8004c8c <USART_PER_CLK_CTRL+0xec>
					else if(pUSARTx == USART3)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ca4 <USART_PER_CLK_CTRL+0x104>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d106      	bne.n	8004c62 <USART_PER_CLK_CTRL+0xc2>
						USART3_CLK_DI;
 8004c54:	4b11      	ldr	r3, [pc, #68]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c58:	4a10      	ldr	r2, [pc, #64]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c5e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8004c60:	e014      	b.n	8004c8c <USART_PER_CLK_CTRL+0xec>
					else if(pUSARTx == UART4)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a10      	ldr	r2, [pc, #64]	@ (8004ca8 <USART_PER_CLK_CTRL+0x108>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d106      	bne.n	8004c78 <USART_PER_CLK_CTRL+0xd8>
						UART4_CLK_DI;
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c70:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004c74:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8004c76:	e009      	b.n	8004c8c <USART_PER_CLK_CTRL+0xec>
					else if (pUSARTx == UART5)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8004cac <USART_PER_CLK_CTRL+0x10c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d105      	bne.n	8004c8c <USART_PER_CLK_CTRL+0xec>
						UART5_CLK_DI;
 8004c80:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c84:	4a05      	ldr	r2, [pc, #20]	@ (8004c9c <USART_PER_CLK_CTRL+0xfc>)
 8004c86:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c8a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40013800 	.word	0x40013800
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40004400 	.word	0x40004400
 8004ca4:	40004800 	.word	0x40004800
 8004ca8:	40004c00 	.word	0x40004c00
 8004cac:	40005000 	.word	0x40005000

08004cb0 <USART_SEND_DATA>:

//data transfer and receiver
void USART_SEND_DATA(USART_Handle_t *pUSARTHandle,uint8_t *pTXBuffer, uint8_t len)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	71fb      	strb	r3, [r7, #7]
uint16_t *pdata;

//transfer  the data till the length become zero
for(uint8_t i=0;i<len;i++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	75fb      	strb	r3, [r7, #23]
 8004cc2:	e031      	b.n	8004d28 <USART_SEND_DATA+0x78>
{
	//check transfer buffer is empty or not
	while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8004cc4:	bf00      	nop
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2180      	movs	r1, #128	@ 0x80
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f859 	bl	8004d84 <USART_GetFlagStatus>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f6      	beq.n	8004cc6 <USART_SEND_DATA+0x16>

	if(pUSARTHandle->USART_Config_t.USART_WORD_LEN == USART_WORDLEN_9BITS)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	7b5b      	ldrb	r3, [r3, #13]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d118      	bne.n	8004d12 <USART_SEND_DATA+0x62>
	{
		pdata = (uint16_t*)pTXBuffer;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	613b      	str	r3, [r7, #16]
		pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf2:	629a      	str	r2, [r3, #40]	@ 0x28

		if(pUSARTHandle->USART_Config_t.USART_PARITY == USART_PARITY_DISABLE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	7b9b      	ldrb	r3, [r3, #14]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d106      	bne.n	8004d0a <USART_SEND_DATA+0x5a>
		{
			pTXBuffer++;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	60bb      	str	r3, [r7, #8]
			pTXBuffer++;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	3301      	adds	r3, #1
 8004d06:	60bb      	str	r3, [r7, #8]
 8004d08:	e00b      	b.n	8004d22 <USART_SEND_DATA+0x72>
		}
		else
		{
			pTXBuffer++;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	e007      	b.n	8004d22 <USART_SEND_DATA+0x72>
		}
	}
	else
	{
		//8 bit data transfer
		pUSARTHandle->pUSARTx->TDR = (*pTXBuffer & (uint8_t) 0xFF);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	629a      	str	r2, [r3, #40]	@ 0x28
		pTXBuffer++;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60bb      	str	r3, [r7, #8]
for(uint8_t i=0;i<len;i++)
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
 8004d24:	3301      	adds	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
 8004d28:	7dfa      	ldrb	r2, [r7, #23]
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d3c9      	bcc.n	8004cc4 <USART_SEND_DATA+0x14>
	}


}
while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8004d30:	bf00      	nop
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2140      	movs	r1, #64	@ 0x40
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 f823 	bl	8004d84 <USART_GetFlagStatus>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f6      	beq.n	8004d32 <USART_SEND_DATA+0x82>
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <USART_PeripheralControl>:

/*
 * Other Peripheral Control APIs
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d106      	bne.n	8004d6e <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1<<0);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f043 0201 	orr.w	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pUSARTx->CR1 &= ~(1<<0);
	}
}
 8004d6c:	e005      	b.n	8004d7a <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1<<0);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <USART_GetFlagStatus>:
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	if(pUSARTx->ISR & FlagName)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69da      	ldr	r2, [r3, #28]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr
	...

08004dac <USART_SetBaudRate>:
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
    uint32_t PCLKx;
    uint32_t usartdiv;
    uint32_t brr;


    if(pUSARTx == USART1 )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e24 <USART_SetBaudRate+0x78>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d103      	bne.n	8004dc6 <USART_SetBaudRate+0x1a>
    {
        PCLKx = RCC_GetPCLK2Value(); // APB2
 8004dbe:	f7ff fbe7 	bl	8004590 <RCC_GetPCLK2Value>
 8004dc2:	6178      	str	r0, [r7, #20]
 8004dc4:	e002      	b.n	8004dcc <USART_SetBaudRate+0x20>
    }
    else
    {
        PCLKx = RCC_GetPCLK1Value(); // APB1
 8004dc6:	f7ff fb7b 	bl	80044c0 <RCC_GetPCLK1Value>
 8004dca:	6178      	str	r0, [r7, #20]
    }

    // 2. Check OVER8 (CR1 bit 15)
    if(pUSARTx->CR1 & (1 << 15))  // oversampling by 8
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d013      	beq.n	8004e00 <USART_SetBaudRate+0x54>
    {
        usartdiv = (2 * PCLKx + BaudRate/2) / BaudRate;  // rounded
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	005a      	lsls	r2, r3, #1
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	441a      	add	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	60fb      	str	r3, [r7, #12]
        brr = (usartdiv & 0xFFF0) | ((usartdiv & 0x000F) >> 1);
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8004df0:	4013      	ands	r3, r2
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	0852      	lsrs	r2, r2, #1
 8004df6:	f002 0207 	and.w	r2, r2, #7
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	e009      	b.n	8004e14 <USART_SetBaudRate+0x68>
    }
    else // oversampling by 16
    {
        usartdiv = (PCLKx + BaudRate/2) / BaudRate; // rounded
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	085a      	lsrs	r2, r3, #1
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	441a      	add	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	60fb      	str	r3, [r7, #12]
        brr = usartdiv;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	613b      	str	r3, [r7, #16]
    }

    // 3. Write BRR
    pUSARTx->BRR = brr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	60da      	str	r2, [r3, #12]
}
 8004e1a:	bf00      	nop
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40013800 	.word	0x40013800

08004e28 <USART_IRQHandling>:

}


void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the ISR
	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << 6);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3a:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << 6);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e46:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d02f      	beq.n	8004eae <USART_IRQHandling+0x86>
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d02c      	beq.n	8004eae <USART_IRQHandling+0x86>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TXBusyState== USART_BUSY_IN_TX)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	7e9b      	ldrb	r3, [r3, #26]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d128      	bne.n	8004eae <USART_IRQHandling+0x86>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TXLEN )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7e1b      	ldrb	r3, [r3, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d124      	bne.n	8004eae <USART_IRQHandling+0x86>
			{
				//Implement the code to clear the TC flag

				 pUSARTHandle->pUSARTx->CR1 &= ~(1 << 7);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e72:	601a      	str	r2, [r3, #0]
				            pUSARTHandle->pUSARTx->CR1 &= ~(1 << 6);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e82:	601a      	str	r2, [r3, #0]
				pUSARTHandle->pUSARTx->ICR |= ( 1 << 6);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e92:	621a      	str	r2, [r3, #32]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TXBusyState = USART_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	769a      	strb	r2, [r3, #26]

				//Reset Buffer address to NULL
				pUSARTHandle->pTXBuffer = NULL;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TXLEN = 0;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	761a      	strb	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f990 	bl	80051ce <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << 7);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb8:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << 7);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec4:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d057      	beq.n	8004f7c <USART_IRQHandling+0x154>
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d054      	beq.n	8004f7c <USART_IRQHandling+0x154>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TXBusyState == USART_BUSY_IN_TX)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7e9b      	ldrb	r3, [r3, #26]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d150      	bne.n	8004f7c <USART_IRQHandling+0x154>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TXLEN > 0)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	7e1b      	ldrb	r3, [r3, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d040      	beq.n	8004f64 <USART_IRQHandling+0x13c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config_t.USART_WORD_LEN == USART_WORDLEN_9BITS)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7b5b      	ldrb	r3, [r3, #13]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d12b      	bne.n	8004f42 <USART_IRQHandling+0x11a>
				{
					//if 9BIT load the TDR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTXBuffer;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004efe:	629a      	str	r2, [r3, #40]	@ 0x28

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config_t.USART_PARITY == USART_PARITY_DISABLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	7b9b      	ldrb	r3, [r3, #14]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d110      	bne.n	8004f2a <USART_IRQHandling+0x102>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTXBuffer++;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTXBuffer++;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TXLEN-=2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7e1b      	ldrb	r3, [r3, #24]
 8004f20:	3b02      	subs	r3, #2
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	761a      	strb	r2, [r3, #24]
 8004f28:	e01c      	b.n	8004f64 <USART_IRQHandling+0x13c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTXBuffer++;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TXLEN-=1;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	7e1b      	ldrb	r3, [r3, #24]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	761a      	strb	r2, [r3, #24]
 8004f40:	e010      	b.n	8004f64 <USART_IRQHandling+0x13c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->TDR = (*pUSARTHandle->pTXBuffer  & (uint8_t)0xFF);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	629a      	str	r2, [r3, #40]	@ 0x28

					//Implement the code to increment the buffer address
					pUSARTHandle->pTXBuffer++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TXLEN-=1;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	7e1b      	ldrb	r3, [r3, #24]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	761a      	strb	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TXLEN == 0 )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	7e1b      	ldrb	r3, [r3, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <USART_IRQHandling+0x154>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << 7);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f7a:	601a      	str	r2, [r3, #0]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << 5);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << 5);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d074      	beq.n	8005084 <USART_IRQHandling+0x25c>
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d071      	beq.n	8005084 <USART_IRQHandling+0x25c>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RXBusyState == USART_BUSY_IN_RX)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	7edb      	ldrb	r3, [r3, #27]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d16d      	bne.n	8005084 <USART_IRQHandling+0x25c>
		{
			if(pUSARTHandle->RXLEN > 0)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	7e5b      	ldrb	r3, [r3, #25]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d056      	beq.n	800505e <USART_IRQHandling+0x236>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config_t.USART_WORD_LEN == USART_WORDLEN_9BITS)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	7b5b      	ldrb	r3, [r3, #13]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d131      	bne.n	800501c <USART_IRQHandling+0x1f4>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config_t.USART_PARITY == USART_PARITY_DISABLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	7b9b      	ldrb	r3, [r3, #14]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d11a      	bne.n	8004ff6 <USART_IRQHandling+0x1ce>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the RDR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRXBuffer) = (pUSARTHandle->pUSARTx->RDR  & (uint16_t)0x01FF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd0:	b292      	uxth	r2, r2
 8004fd2:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRXBuffer++;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRXBuffer++;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RXLEN-=2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	7e5b      	ldrb	r3, [r3, #25]
 8004fec:	3b02      	subs	r3, #2
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	765a      	strb	r2, [r3, #25]
 8004ff4:	e033      	b.n	800505e <USART_IRQHandling+0x236>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRXBuffer = (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRXBuffer++;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RXLEN-=1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	7e5b      	ldrb	r3, [r3, #25]
 8005012:	3b01      	subs	r3, #1
 8005014:	b2da      	uxtb	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	765a      	strb	r2, [r3, #25]
 800501a:	e020      	b.n	800505e <USART_IRQHandling+0x236>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config_t.USART_PARITY == USART_PARITY_DISABLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7b9b      	ldrb	r3, [r3, #14]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d107      	bne.n	8005034 <USART_IRQHandling+0x20c>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRXBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e009      	b.n	8005048 <USART_IRQHandling+0x220>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRXBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0x7F);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503a:	b2da      	uxtb	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRXBuffer++;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RXLEN-=1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	7e5b      	ldrb	r3, [r3, #25]
 8005056:	3b01      	subs	r3, #1
 8005058:	b2da      	uxtb	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	765a      	strb	r2, [r3, #25]
				}


			}//if of >0

			if(! pUSARTHandle->RXLEN)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	7e5b      	ldrb	r3, [r3, #25]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10e      	bne.n	8005084 <USART_IRQHandling+0x25c>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << 5);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0220 	bic.w	r2, r2, #32
 8005074:	601a      	str	r2, [r3, #0]
				pUSARTHandle->RXBusyState = USART_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	76da      	strb	r2, [r3, #27]
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 800507c:	2101      	movs	r1, #1
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8a5 	bl	80051ce <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/


	//Implement the code to check the status of CTS bit in the ISR
	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << 10);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800508e:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR3
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << 9);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800509a:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << 10);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a6:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00e      	beq.n	80050cc <USART_IRQHandling+0x2a4>
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <USART_IRQHandling+0x2a4>
	{
		//Implement the code to clear the CTS flag in ISR
		pUSARTHandle->pUSARTx->ICR |= ( 1 << 9);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6a1a      	ldr	r2, [r3, #32]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050c2:	621a      	str	r2, [r3, #32]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 80050c4:	2103      	movs	r1, #3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f881 	bl	80051ce <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the ISR
	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << 4);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << 4);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00f      	beq.n	800510a <USART_IRQHandling+0x2e2>
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00c      	beq.n	800510a <USART_IRQHandling+0x2e2>
	{
		//Implement the code to clear the IDLE flag.
		temp1 = pUSARTHandle->pUSARTx->ICR |=( 1 <<4);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	f043 0310 	orr.w	r3, r3, #16
 80050fe:	6213      	str	r3, [r2, #32]
 8005100:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8005102:	2102      	movs	r1, #2
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f862 	bl	80051ce <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the ISR
	temp1 = pUSARTHandle->pUSARTx->ISR & (1 << 3);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << 5);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <USART_IRQHandling+0x31e>
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <USART_IRQHandling+0x31e>
	{
		pUSARTHandle->pUSARTx->ICR |= (1<< 3);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0208 	orr.w	r2, r2, #8
 800513c:	621a      	str	r2, [r3, #32]

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 800513e:	2107      	movs	r1, #7
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f844 	bl	80051ce <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << 0) ;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d036      	beq.n	80051c6 <USART_IRQHandling+0x39e>
	{
		temp1 = pUSARTHandle->pUSARTx->ISR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << 1))
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <USART_IRQHandling+0x35a>
		{
			//CLEARING THIS REGISTER
			pUSARTHandle->pUSARTx->ICR |= (1 <<1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0202 	orr.w	r2, r2, #2
 8005178:	621a      	str	r2, [r3, #32]
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 800517a:	2105      	movs	r1, #5
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f826 	bl	80051ce <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << 2) )
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00b      	beq.n	80051a4 <USART_IRQHandling+0x37c>
		{
			pUSARTHandle->pUSARTx->ICR |= (1 <<2);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a1a      	ldr	r2, [r3, #32]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0204 	orr.w	r2, r2, #4
 800519a:	621a      	str	r2, [r3, #32]
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 800519c:	2106      	movs	r1, #6
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f815 	bl	80051ce <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << 3) )
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <USART_IRQHandling+0x39e>
		{
			pUSARTHandle->pUSARTx->ICR |= (1 <<3);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0208 	orr.w	r2, r2, #8
 80051bc:	621a      	str	r2, [r3, #32]
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80051be:	2107      	movs	r1, #7
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f804 	bl	80051ce <USART_ApplicationEventCallback>
		}
	}


}
 80051c6:	bf00      	nop
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <USART_ApplicationEventCallback>:

__weak void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t event)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	70fb      	strb	r3, [r7, #3]

}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <__libc_init_array>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	4d0d      	ldr	r5, [pc, #52]	@ (800521c <__libc_init_array+0x38>)
 80051e8:	4c0d      	ldr	r4, [pc, #52]	@ (8005220 <__libc_init_array+0x3c>)
 80051ea:	1b64      	subs	r4, r4, r5
 80051ec:	10a4      	asrs	r4, r4, #2
 80051ee:	2600      	movs	r6, #0
 80051f0:	42a6      	cmp	r6, r4
 80051f2:	d109      	bne.n	8005208 <__libc_init_array+0x24>
 80051f4:	4d0b      	ldr	r5, [pc, #44]	@ (8005224 <__libc_init_array+0x40>)
 80051f6:	4c0c      	ldr	r4, [pc, #48]	@ (8005228 <__libc_init_array+0x44>)
 80051f8:	f000 f818 	bl	800522c <_init>
 80051fc:	1b64      	subs	r4, r4, r5
 80051fe:	10a4      	asrs	r4, r4, #2
 8005200:	2600      	movs	r6, #0
 8005202:	42a6      	cmp	r6, r4
 8005204:	d105      	bne.n	8005212 <__libc_init_array+0x2e>
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	f855 3b04 	ldr.w	r3, [r5], #4
 800520c:	4798      	blx	r3
 800520e:	3601      	adds	r6, #1
 8005210:	e7ee      	b.n	80051f0 <__libc_init_array+0xc>
 8005212:	f855 3b04 	ldr.w	r3, [r5], #4
 8005216:	4798      	blx	r3
 8005218:	3601      	adds	r6, #1
 800521a:	e7f2      	b.n	8005202 <__libc_init_array+0x1e>
 800521c:	0800524c 	.word	0x0800524c
 8005220:	0800524c 	.word	0x0800524c
 8005224:	0800524c 	.word	0x0800524c
 8005228:	08005250 	.word	0x08005250

0800522c <_init>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	bf00      	nop
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr

08005238 <_fini>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr
